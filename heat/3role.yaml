heat_template_version: 2013-05-23

description: >
  HOT template to create a stack that instantiates the currently selected scenario

parameters:
  pubnet:
    type: string
    description: Name of the public network for this cloud
  mirror_address:
    type: string
    description: Name of the public network for this cloud
  floating_pool:
    type: string
    default: PublicNet
    description: Name of the floating ip pool for this cloud
  image:
    type: string
    default: centos7-64
    description: The image to use for all nodes
  key_name:
    type: string
    default: test2
    description: The key name to use for all nodes
  small_flavor:
    type: string
    default: m1.small
    description: The flavor name to use for small roles
  medium_flavor:
    type: string
    default: m1.medium
    description: The flavor name to use for medium roles
  config_repo:
    type: string
    default: 'https://github.com/phchoic/puppet_openstack_builder'
    description: Git repo that contains the configuration for this test run
  config_ref:
    type: string
    default: master
    description: Git ref to checkout

resources:
  internal_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: pubnet }

  internal_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      subnet_id: { get_resource: internal_subnet }
      router_id: { get_resource: internal_router }

  internal_network:
    type: OS::Neutron::Net

  internal_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: internal_network }
      cidr: 192.168.242.0/24
      dns_nameservers:
        - 8.8.8.8

  proxy1_floatingip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: floating_pool }

  proxy1_floatingip_ass:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: proxy1_floatingip }
      server_id: { get_resource: proxy1 }
    depends_on:
      - internal_router_interface
      - internal_router

  control1_floatingip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: floating_pool }

  control1_floatingip_ass:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: control1_floatingip }
      server_id: { get_resource: control1 }
    depends_on:
      - internal_router_interface
      - internal_router

  infra1_internal:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: internal_network }
      fixed_ips:
        - subnet_id: { get_resource: internal_subnet  }
      security_groups:
        - { get_resource: test_secgroup }

  internal_network:
    type: OS::Neutron::Net

  internal_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: internal_network }
      cidr: 192.168.242.0/24
      gateway_ip: 192.168.242.1
      dns_nameservers:
        - 8.8.8.8

  external_net:
    type: OS::Neutron::Net

  external_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: external_net }
      cidr: 10.2.3.0/24
      gateway_ip: null
      dns_nameservers:
        - 8.8.8.8

  test_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security group for test build server allowing http and ssh
      rules:
        - direction: ingress
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0

  infra1:
    type: OS::Nova::Server
    properties:
      name: infra1 
      image: { get_param: image}
      flavor: { get_param: small_flavor}
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: infra1_internal }
      metadata:
        internal_iface: eth0
        internal_address: '%{ipaddress_eth0}'
        public_iface: eth0
        public_address: '%{ipaddress_eth0}'
        mirror_address: { get_param: mirror_address }
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            ethtool -K eth0 tso off
            ethtool -K eth0 gso off
            ethtool -K eth0 gro off
            yum install -y git
            git clone __config_repo /vagrant
            cd /vagrant
            git checkout __config_ref
            bash -x provision/bootstrap.sh &> /root/bootstrap.log
          params:
            __config_repo: { get_param: config_repo }
            __config_ref: { get_param: config_ref }

  infra2:
    type: OS::Nova::Server
    properties:
      name: infra2
      image: { get_param: image}
      flavor: { get_param: small_flavor}
      key_name: { get_param: key_name }
      networks:
        - network: { get_resource: internal_network }
      security_groups:
        - { get_resource: test_secgroup }
      metadata:
        internal_iface: eth0
        internal_address: '%{ipaddress_eth0}'
        public_iface: eth0
        public_address: '%{ipaddress_eth0}'
        mirror_address: { get_param: mirror_address }
        infra1_internal: { get_attr: [ infra1_internal, fixed_ips, 0, ip_address ]}
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            ethtool -K eth0 tso off
            ethtool -K eth0 gso off
            ethtool -K eth0 gro off
            yum install -y git
            git clone __config_repo /vagrant
            cd /vagrant
            git checkout __config_ref
            bash -x provision/bootstrap.sh &> /root/bootstrap.log
          params:
            __config_repo: { get_param: config_repo }
            __config_ref: { get_param: config_ref }

  infra3:
    type: OS::Nova::Server
    properties:
      name: infra3
      image: { get_param: image}
      flavor: { get_param: small_flavor}
      key_name: { get_param: key_name }
      networks:
        - network: { get_resource: internal_network }
      security_groups:
        - { get_resource: test_secgroup }
      metadata:
        internal_iface: eth0
        internal_address: '%{ipaddress_eth0}'
        public_iface: eth0
        public_address: '%{ipaddress_eth0}'
        mirror_address: { get_param: mirror_address }
        infra1_internal: { get_attr: [ infra1_internal, fixed_ips, 0, ip_address ]}
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            ethtool -K eth0 tso off
            ethtool -K eth0 gso off
            ethtool -K eth0 gro off
            yum install -y git
            git clone __config_repo /vagrant
            cd /vagrant
            git checkout __config_ref
            bash -x provision/bootstrap.sh &> /root/bootstrap.log
          params:
            __config_repo: { get_param: config_repo }
            __config_ref: { get_param: config_ref }

  proxy1:
    type: OS::Nova::Server
    properties:
      name: proxy1
      image: { get_param: image}
      flavor: { get_param: small_flavor}
      key_name: { get_param: key_name }
      networks:
        - network: { get_resource: internal_network }
        - network: { get_resource: external_net }
      security_groups:
        - { get_resource: test_secgroup }
      metadata:
        internal_iface: eth0
        internal_address: '%{ipaddress_eth0}'
        public_iface: eth1
        public_address: '%{ipaddress_eth0}'
        mirror_address: { get_param: mirror_address }
        infra1_internal: { get_attr: [ infra1_internal, fixed_ips, 0, ip_address ]}
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            ethtool -K eth0 tso off
            ethtool -K eth0 gso off
            ethtool -K eth0 gro off
            yum install -y git
            git clone __config_repo /vagrant
            cd /vagrant
            git checkout __config_ref
            bash -x provision/bootstrap.sh &> /root/bootstrap.log
          params:
            __config_repo: { get_param: config_repo }
            __config_ref: { get_param: config_ref }

  control1:
    type: OS::Nova::Server
    properties:
      name: control1
      image: { get_param: image}
      flavor: { get_param: medium_flavor}
      key_name: { get_param: key_name}
      networks:
        - network: { get_resource: internal_network }
      security_groups:
        - { get_resource: test_secgroup }
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            ethtool -K eth0 tso off
            ethtool -K eth0 gso off
            ethtool -K eth0 gro off
            yum install -y git
            git clone __config_repo /vagrant
            cd /vagrant
            git checkout __config_ref
            bash -x provision/bootstrap.sh &> /root/bootstrap.log
          params:
            __config_repo: { get_param: config_repo }
            __config_ref: { get_param: config_ref }

      metadata:
        internal_iface: eth0
        internal_address: "%{ipaddress_eth0}"
        public_iface: eth0
        public_address: "%{ipaddress_eth0}"
        infra1_internal: { get_attr: [ infra1_internal, fixed_ips, 0, ip_address ]}
        mirror_address: { get_param: mirror_address }

  hyper1:
    type: OS::Nova::Server
    properties:
      name: hyper1
      image: { get_param: image}
      flavor: { get_param: medium_flavor}
      key_name: { get_param: key_name}
      networks:
        - network: { get_resource: internal_network }
      security_groups:
        - { get_resource: test_secgroup }
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            ethtool -K eth0 tso off
            ethtool -K eth0 gso off
            ethtool -K eth0 gro off
            yum install -y git
            git clone __config_repo /vagrant
            cd /vagrant
            git checkout __config_ref
            bash -x provision/bootstrap.sh &> /root/bootstrap.log
          params:
            __config_repo: { get_param: config_repo }
            __config_ref: { get_param: config_ref }

      metadata:
        internal_iface: eth0
        internal_address: "%{ipaddress_eth0}"
        infra1_internal: { get_attr: [ infra1_internal, fixed_ips, 0, ip_address ]}
        mirror_address: { get_param: mirror_address }

  hyper2:
    type: OS::Nova::Server
    properties:
      name: hyper2
      image: { get_param: image}
      flavor: { get_param: medium_flavor}
      key_name: { get_param: key_name}
      networks:
        - network: { get_resource: internal_network }
      security_groups:
        - { get_resource: test_secgroup }
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            ethtool -K eth0 tso off
            ethtool -K eth0 gso off
            ethtool -K eth0 gro off
            yum install -y git
            git clone __config_repo /vagrant
            cd /vagrant
            git checkout __config_ref
            bash -x provision/bootstrap.sh &> /root/bootstrap.log
          params:
            __config_repo: { get_param: config_repo }
            __config_ref: { get_param: config_ref }

      metadata:
        internal_iface: eth0
        internal_address: "%{ipaddress_eth0}"
        infra1_internal: { get_attr: [ infra1_internal, fixed_ips, 0, ip_address ]}
        mirror_address: { get_param: mirror_address }
